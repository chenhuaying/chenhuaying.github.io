<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Objective C on ChenHuaying&#39;s Blog</title>
        <link>http://chenhuaying.github.io/tags/objective-c/</link>
        <language>en-US</language>
        <author>Cyrill at Schumacher dot fm</author>
        <rights>Copyright (c) 2014, Cyrill Schumacher; all rights reserved.</rights>
        <updated>Mon, 04 Jan 2016 12:40:49 CST</updated>
        
        <item>
            <title>Foundation学习笔记</title>
            <link>http://chenhuaying.github.io/post/2016/2016-01-04-Foundation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Mon, 04 Jan 2016 12:40:49 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2016/2016-01-04-Foundation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <description>

&lt;h2 id=&#34;foundation:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;Foundation&lt;/h2&gt;

&lt;p&gt;Foundation为objective-c提供了数字、字符串、数组，字典等数据结构，能像其它高级语言Python/PHP/Go那样操作字符串、数组、字典与集合等。如果不知道怎么写，可以先想想python怎么做的，然后再看看Foundation对应的API。&lt;/p&gt;

&lt;h3 id=&#34;数字:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;数字&lt;/h3&gt;

&lt;p&gt;NSNumber，需要&lt;code&gt;#import &amp;lt;Foundation/NSValue.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;封装了对数字的操作，包括整数，浮点数&lt;/p&gt;

&lt;h3 id=&#34;字符串:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;字符串&lt;/h3&gt;

&lt;p&gt;NSString，需要&lt;code&gt;#import &amp;lt;Foundation/NSString.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;封装字符串操作，有很多类似Python等高级语言里的操作都有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不可变字符串，@&amp;ldquo;string&amp;rdquo;生成的是不可变字符串NSConstantString&lt;/li&gt;
&lt;li&gt;可变字符串，NSMutableString&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NSMutableString与NSConstantString都是NSString类的子类&lt;/p&gt;

&lt;h3 id=&#34;数组:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;数组&lt;/h3&gt;

&lt;p&gt;NSArray，需要&lt;code&gt;#import &amp;lt;Foundation/NSArray.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NSArray是不可变数组&lt;/li&gt;
&lt;li&gt;NSMutableArray是可变数组，是NSArray的子类&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数组基本操作&lt;/p&gt;

&lt;h4 id=&#34;1-初始化不可变数组:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;1. 初始化不可变数组&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSArray *monthName = [NSArray arrayWithObjects:
  @&amp;quot;January&amp;quot;, @&amp;quot;February&amp;quot;, @&amp;quot;March&amp;quot;, @&amp;quot;April&amp;quot;,
	@&amp;quot;May&amp;quot;, @&amp;quot;June&amp;quot;, @&amp;quot;July&amp;quot;, @&amp;quot;August&amp;quot;, @&amp;quot;September&amp;quot;,
	@&amp;quot;October&amp;quot;, @&amp;quot;November&amp;quot;, @&amp;quot;December&amp;quot;, nil];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一个必须指定为nil，但它不会存储在数组中&lt;/p&gt;

&lt;h4 id=&#34;2-可变数组初始化:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;2. 可变数组初始化&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSMutableArray *myMutableArray = [[NSMutableArray alloc] init]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过alloc来分配数组可以获得数组的所有权，如果用array方法分配数组，只有它的使用权，它的所有权属于NSMutableArray&lt;strong&gt;有待于测试它的真实含义&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-枚举:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;3. 枚举&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;for ( T *v in myArray ) {
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字典:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;字典&lt;/h3&gt;

&lt;p&gt;NSDictionary，需要&lt;code&gt;#import &amp;lt;Foundation/NSDictionary.h&amp;gt;&lt;/code&gt;，字典的Key可以是任何对象，但必须是单值，Value可以是任何对象，不能是nil&lt;/p&gt;

&lt;p&gt;NSMutableDictionary是NSDictionary的子类&lt;/p&gt;

&lt;p&gt;枚举&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (T *key in myDict) {
  [myDict objectForKey: key]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;集合:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;集合&lt;/h3&gt;

&lt;p&gt;NSSet, 需要&lt;code&gt;#import &amp;lt;Foundation/NSSet.h&amp;gt;&lt;/code&gt;，支持交集与并集的操作&lt;/p&gt;

&lt;p&gt;NSMutableSet是NSSet的子类&lt;/p&gt;

&lt;p&gt;枚举&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (T *e in mySet) {
  [e method]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有一种NScountedSet，支持一个集合中有多个值，增加一个count+1，删除一个count-1，如果count为零则删除对象&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>objective-c学习笔记</title>
            <link>http://chenhuaying.github.io/post/2015/2015-12-29-objective-c%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Tue, 29 Dec 2015 14:48:53 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2015/2015-12-29-objective-c%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <description>

&lt;h2 id=&#34;类的定义中的继承与多态:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;类的定义中的继承与多态&lt;/h2&gt;

&lt;p&gt;与C++相似，支持继承、重载&lt;/p&gt;

&lt;h3 id=&#34;多态:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;多态&lt;/h3&gt;

&lt;p&gt;使用&lt;strong&gt;abstruct&lt;/strong&gt; superclass&lt;/p&gt;

&lt;h2 id=&#34;成员变量:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;成员变量&lt;/h2&gt;

&lt;p&gt;下文中&lt;strong&gt;instance&lt;/strong&gt;表示某个类的实例，&lt;strong&gt;property&lt;/strong&gt;表示类的某个成员变量，setProperty表示该成员变量的setter&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取&lt;code&gt;[instance property]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;赋值&lt;code&gt;[instance setProperty: value]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;成员函数调用:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;成员函数调用&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;类方法或成员函数调用

&lt;ul&gt;
&lt;li&gt;objc: &lt;code&gt;[className/instance method: parameters]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++: &lt;code&gt;className::static method&lt;/code&gt;，或者是&lt;code&gt;object.method&lt;/code&gt;与&lt;code&gt;pointer-&amp;gt;method&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;new实例化对象

&lt;ul&gt;
&lt;li&gt;objc: &lt;code&gt;[class new]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;c++:  &lt;code&gt;new class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;objective-c中对函数的调用很一致，c++中实例化与函数调用的形式是不一样的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;内存分配
&lt;code&gt;[ClassName alloc]/[ClassName allocate]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化
&lt;code&gt;[ClassName init]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存释放
&lt;code&gt;[instance release]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;alloc, init, release&lt;/strong&gt; 从&lt;strong&gt;NSObject&lt;/strong&gt;继承而来&lt;/p&gt;

&lt;h2 id=&#34;类定义:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;类定义&lt;/h2&gt;

&lt;p&gt;类的定义与分为声明和定义两部分&lt;/p&gt;

&lt;h3 id=&#34;声明-interface:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;声明: @interface&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; 成员函数，&lt;strong&gt;+&lt;/strong&gt; 类方法&lt;/li&gt;
&lt;li&gt;函数返回值

&lt;ul&gt;
&lt;li&gt;返回值：放在负号后面的括号中&lt;strong&gt;-(int), -(double)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;无返回值：&lt;strong&gt;-(void)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方法声明：
&lt;code&gt;-(return type) functionName: (parameter type) parameter;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;声明格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface NewClass : fatherClass
{
   memberDeclarations;  // 成员变量声明
}
methodDeclarations;      // 成员函数声明
@end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;属性
@property
自动生成setter/getter的声明，定义的需要在定义部分使用@synthesize&lt;br /&gt;
&lt;code&gt;@property int x&lt;/code&gt; 自动生成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(void) setX: (int) a;
-(int) X();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多参数方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;冒号(&lt;strong&gt;:&lt;/strong&gt;)连接参数&lt;/li&gt;
&lt;li&gt;冒号连接的参数名，是函数签名的一部分，如下面的&lt;strong&gt;over&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;-(void) setTo: (int) n over: (int) d&lt;/code&gt;&lt;br /&gt;
调用时采用如下形式:&lt;br /&gt;
        &lt;code&gt;[instance setTo: 1 over: 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不带参数名的方法&lt;br /&gt;
  &lt;code&gt;-(void) set: (int) n : (int) d&lt;/code&gt;&lt;br /&gt;
  调用形式:&lt;br /&gt;
        &lt;code&gt;[instance set: 1 : 3]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;@class声明一个类型，在接下来的作用域中就可以直接使用@class声明过的类:
  &lt;code&gt;@class ClassName&lt;/code&gt;&lt;br /&gt;
  可以用&lt;code&gt;#import &amp;lt;class-interface.h&amp;gt;&lt;/code&gt;来代替，但用@class效率更高&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要使用class中的方法，还是得用&lt;strong&gt;import&lt;/strong&gt;方式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;定义-implement:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;定义: @implement&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义格式:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation NewClass
   methodDefinitions;  // 成员函数定义
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@implementation NewClass: NSObject实现的父类是可选的，通常不用显示的写出，声明必须要有&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;属性@synthesize&lt;br /&gt;
&lt;code&gt;@synthesize x&lt;/code&gt;自动生成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(void) setX: (int) a
{
    x = a;
}


-(int) X:
{
   return x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一行可以定义多个，之间用逗号分隔&lt;code&gt;@synthesize x, y&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;self关键字:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;self关键字&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[self method]&lt;/code&gt;self表示方法的接收者是对象自身
在类的定义中访问成员变量不需要用self&lt;/p&gt;

&lt;h3 id=&#34;点运算符:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;点运算符&lt;/h3&gt;

&lt;p&gt;objective-c 2.0开始可以使用&lt;strong&gt;.&lt;/strong&gt;运算符&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取成员变量值: &lt;strong&gt;instance.property&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;设置成员变量值: &lt;strong&gt;instance.property = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;初始化:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;初始化&lt;/h3&gt;

&lt;p&gt;分配内配后通常要调用初始化方法，一定要正确的初始化&lt;strong&gt;继承&lt;/strong&gt;而来的成员变量，首先调用父类的初始化方法，再初始化自己的成员变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(MyClass *) initWith: (int) a : (int) b
{
	self = [super init];
	if (self)
	  [self setA: a withB: b];
	return self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基本数据类型:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;基本数据类型&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;内置数据类型

&lt;ul&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;字符串

&lt;ul&gt;
&lt;li&gt;普通字符串: &amp;ldquo;string&amp;rdquo;&lt;/li&gt;
&lt;li&gt;NSString: @&amp;ldquo;string&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;限定

&lt;ul&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;li&gt;long long&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;unsigned&lt;/li&gt;
&lt;li&gt;signed&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;id类型

&lt;ul&gt;
&lt;li&gt;id类型可以存储任意类型的值，有点&lt;/li&gt;
&lt;li&gt;id类型是&lt;strong&gt;返回值&lt;/strong&gt;、&lt;strong&gt;参数&lt;/strong&gt;的默认类型&lt;/li&gt;
&lt;li&gt;多态、动态绑定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;格式化输出:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;格式化输出&lt;/h3&gt;

&lt;p&gt;NSLog格式化字符&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;整数: %i %o %#o %x %#x %X %#X&lt;/li&gt;
&lt;li&gt;浮点数: %f %e %g&lt;/li&gt;
&lt;li&gt;字符: %c&lt;/li&gt;
&lt;li&gt;字符串: %@&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;表达式:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;表达式&lt;/h2&gt;

&lt;h3 id=&#34;运算符:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;运算符&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;算术运算&lt;/li&gt;
&lt;li&gt;- * / %&lt;/li&gt;
&lt;li&gt;赋值运算
＝ += -= &amp;amp;= |=&lt;/li&gt;
&lt;li&gt;位运算
&amp;amp; | ^ ~ &amp;gt;&amp;gt; &amp;lt;&amp;lt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;循环:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;循环&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;for: 与C++相同，支持在语句中声明变量&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;do&lt;/li&gt;
&lt;li&gt;break continue&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;条件语句:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;条件语句&lt;/h3&gt;

&lt;p&gt;Boolean: TRUE/FALSE YES/NO&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;li&gt;switch&lt;/li&gt;
&lt;li&gt;? :&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;内存管理:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;内存管理&lt;/h2&gt;

&lt;h3 id=&#34;重载dealloc:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;重载dealloc&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;dealloc函数从NSObject继承而来&lt;/li&gt;
&lt;li&gt;释放继承的父类的内存&lt;code&gt;[super release]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(void) dealloc
{
  [x release];
  [super dealloc];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;x可以为nil&lt;strong&gt;对象&lt;/strong&gt;，这点与C++不同，C++中不能释放null指针所指向的内存地址，也不能用NULL指针调用方法，获取属性等操作，而在objective-c中是&lt;strong&gt;允许&lt;/strong&gt;的。&lt;/p&gt;

&lt;h2 id=&#34;多态-动态绑定:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;多态，动态绑定&lt;/h2&gt;

&lt;h3 id=&#34;id类型:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;id类型&lt;/h3&gt;

&lt;p&gt;id类型可以指向存储任何类型的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id f;
Duck *d = [[Duck alloc] init];
Cat *c = [[Cat alloc] init];

f = d
[f say];

f = c
[f say];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个地方有动态语言的特点，不同于C++&lt;/p&gt;

&lt;h3 id=&#34;类对象class-object:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;类对象class-object&lt;/h3&gt;

&lt;p&gt;类对象通常是由class方法产生的对象，如：&lt;br /&gt;
&lt;code&gt;[ClassName/(an instance of ClassName) class]&lt;/code&gt;&lt;br /&gt;
都将得到一个ClassName类对象&lt;/p&gt;

&lt;p&gt;有如下操作:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;判断两个对象是否是相同的类&lt;br /&gt;
&lt;code&gt;if ([obj class] == [obj2 class])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;某个变量是否是是否是属于一个类，即是否是这个类的成员&lt;br /&gt;
&lt;code&gt;[aValue isMemberof: [ClassName class]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个变量是否是一个类的实例&lt;br /&gt;
&lt;code&gt;[aInstance isKindOf: [ClassName class]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个类是否是另一个类的子类&lt;br /&gt;
&lt;code&gt;[ClassName isSubclassOfClass: [BassClassName class]]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;sel对象:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;SEL对象&lt;/h3&gt;

&lt;p&gt;通常由@selector指令产生，如：&lt;code&gt;@selector methodName&lt;/code&gt;，将得到一个SEL对象&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一个类是否有某一个操作&lt;br /&gt;
&lt;code&gt;anObject respondsToSelector: @selector methodName&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;异常处理:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;异常处理&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;try-catch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@try {
   statement;
   statement;
   ...;
}
@catch (NSException *exception) {
   statement;
   statement;
   ...;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;@throw抛出异常&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;作用域:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;作用域&lt;/h2&gt;

&lt;h3 id=&#34;作用域限定指令:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;作用域限定指令&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;@private，只能在该类的方法中使用，其子类也不能使用&lt;/li&gt;
&lt;li&gt;@protected，能在该类及其子类中使用，&lt;strong&gt;默认情况&lt;/strong&gt;；C++类的默认情况则是private&lt;/li&gt;
&lt;li&gt;@public，能在声明后的任意位置访问&lt;/li&gt;
&lt;li&gt;@package，包内访问&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;c类语言作用域:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;C类语言作用域&lt;/h3&gt;

&lt;p&gt;与C类语言相似的作用域，意义也相同
1. 外部变量，extern
2. 静态变量，static&lt;/p&gt;

&lt;h2 id=&#34;存储类说明符:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;存储类说明符&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;auto，与C++11的auto不同，这里表示的是自动变量，通常指的是局部变量，在一个函数或一个代码块中的变量，可以省略&lt;/li&gt;
&lt;li&gt;const，常量&lt;/li&gt;
&lt;li&gt;volatile，防止编译器优化&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;数据类型:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;数据类型&lt;/h2&gt;

&lt;h3 id=&#34;枚举类型:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;枚举类型&lt;/h3&gt;

&lt;p&gt;与C语言类似的语法，第一个赋值为0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum flag {
	on,
	off
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以给他们赋值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum weekDay {
	monday = 1,
	tuesday, wednesday, thursday, friday, saturday, sunday
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;别名:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;别名&lt;/h3&gt;

&lt;p&gt;typedef，相当于给一个类型取了个别名&lt;br /&gt;
&lt;code&gt;typedef typeName newName&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;分类与协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;分类与协议&lt;/h2&gt;

&lt;h3 id=&#34;分类:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;分类&lt;/h3&gt;

&lt;p&gt;用于扩展已有的类型，而无需访问该类的源代码，也就是说可以扩展以二进制形式发布的库！就算是可以访问源代码的类，通过这种方式扩展更安全。&lt;/p&gt;

&lt;p&gt;其声明和定义的语法与类的定义非常相似，圆括号中的是分类名。&lt;/p&gt;

&lt;p&gt;声明的格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassName (categoryName)
-(return type) method: (parameter type) parameter;
...
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;声明中不能指定类的父类，否则编译器会报错&lt;/p&gt;

&lt;p&gt;定义的格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation ClassName (categoryName)
    // code for category  method implementation
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分类中可以重载类中的方法，会影响到该类及其子类，通过&lt;strong&gt;分类&lt;/strong&gt;重载类方法要&lt;strong&gt;谨慎&lt;/strong&gt;使用;&lt;/p&gt;

&lt;p&gt;不必实现分类中的所有方法，可以先定义所有方法，以后再慢慢实现。&lt;/p&gt;

&lt;h3 id=&#34;协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;协议&lt;/h3&gt;

&lt;p&gt;协议定义一组方法，遵循该协议的类需要实现这个协议中的&lt;strong&gt;所有&lt;/strong&gt;方法，&lt;strong&gt;@optional&lt;/strong&gt;指令下的方法&lt;strong&gt;除外&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-声明:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;1. 声明&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@protocol ProtocolName
// methods declare
@optional
// optional methods declare
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@optional表示可选协议，遵循该协议的类不是必须实现可选方法；与之对应的是&lt;strong&gt;@required&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-采用协议-遵循协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;2. 采用协议/遵循协议&lt;/h4&gt;

&lt;p&gt;要让某个类遵循一个协议，在@interface声明时，用&amp;lt;&amp;hellip;&amp;gt;列出协议的名称，多个协议用&lt;strong&gt;,&lt;/strong&gt;分隔&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassName: BaseClass &amp;lt;ProtocaoName, ProtocolName2, ...&amp;gt;
{
    // members declare
}
// methods declare
@end 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-分类采用协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;3. 分类采用协议&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassName (categoryName) &amp;lt;ProtocolName1, ProtocolName2, ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-协议扩展:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;4. 协议扩展&lt;/h4&gt;

&lt;p&gt;协议采用或遵循协议&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@protocol ExtendProtocol &amp;lt;ProtocolName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-非正式协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;5. 非正式协议&lt;/h4&gt;

&lt;p&gt;非正式协议或者叫&lt;strong&gt;抽象协议&lt;/strong&gt;，其实是一个分类，列出一组方法。如果一个类采用正式协议，必须实现协议下的所有方法。如果采用的是非正式协议这不用实现协议下的所有方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassName (categoryName)
// methods declare
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;6-通知编译器做类型检查:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;6. 通知编译器做类型检查&lt;/h4&gt;

&lt;p&gt;在类名称之后的尖括号中添加协议名称，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id &amp;lt;ProtocolName1, ProtocolName2, ...&amp;gt; myObject;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在给myObject赋值时，会进行类型检查，如果该值不遵循指定的协议，编译器会报警&lt;/p&gt;

&lt;h4 id=&#34;7-检查对象是否遵循协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;7. 检查对象是否遵循协议&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;id myObject;
...
if ([myObject conformsToProtocol: @protocol (ProtocolName)]) {
    // do operation
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;8-聚合或者组合:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;8. 聚合或者组合&lt;/h4&gt;

&lt;p&gt;objective-c支持组合的方式扩展，&lt;strong&gt;不支持&lt;/strong&gt;嵌入扩展&lt;/p&gt;

&lt;h2 id=&#34;c语言特性:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;C语言特性&lt;/h2&gt;

&lt;p&gt;C语言特性要用C的方式来操作，不要用objective-c的方式操作&lt;/p&gt;

&lt;h3 id=&#34;宏扩展:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;宏扩展&lt;/h3&gt;

&lt;p&gt;与C的宏相同，支持条件编译，定义宏名等，按照C语言的方式理解即可&lt;/p&gt;

&lt;h3 id=&#34;数组:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;数组&lt;/h3&gt;

&lt;h3 id=&#34;结构体:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;结构体&lt;/h3&gt;

&lt;h3 id=&#34;联合:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;联合&lt;/h3&gt;

&lt;h3 id=&#34;函数:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;函数&lt;/h3&gt;

&lt;h3 id=&#34;其它语言特性:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;其它语言特性&lt;/h3&gt;

&lt;h2 id=&#34;总结:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;objective-c是在C语言的基础上的改进，它们之间有联系，又有区别。objective-c增加了对面向对象编程技术的支持，面向对象部分与C++有些概念相似，但比C++简洁。语言级别的学习先到此告一段落，接下来是Foundation框架的学习，iOS编程的基础。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
