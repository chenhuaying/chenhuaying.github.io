<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title> on ChenHuaying&#39;s Blog</title>
        <link>http://chenhuaying.github.io/</link>
        <language>en-US</language>
        <author>Cyrill at Schumacher dot fm</author>
        <rights>Copyright (c) 2014, Cyrill Schumacher; all rights reserved.</rights>
        <updated>Tue, 05 Jan 2016 12:24:27 CST</updated>
        
        <item>
            <title>Objective-C中的文件管理</title>
            <link>http://chenhuaying.github.io/post/2016/2016-01-05-Objective-C%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
            <pubDate>Tue, 05 Jan 2016 12:24:27 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2016/2016-01-05-Objective-C%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
            <description></description>
        </item>
        
        <item>
            <title>objective-c闭包</title>
            <link>http://chenhuaying.github.io/post/2016/2016-01-04-objective-c%E9%97%AD%E5%8C%85/</link>
            <pubDate>Mon, 04 Jan 2016 19:16:55 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2016/2016-01-04-objective-c%E9%97%AD%E5%8C%85/</guid>
            <description>

&lt;p&gt;Objective-C中的闭包叫做Block，目前阶段只学习使用，不分析原理&lt;/p&gt;

&lt;p&gt;Block是C风格的实现方式，可以理解为函数指针，按照函数指针的方式使用闭包。但闭包的定义可以在函数内，比函数灵活。&lt;/p&gt;

&lt;h3 id=&#34;block声明:c48de781c7df3f22ef708366af0071e1&#34;&gt;block声明&lt;/h3&gt;

&lt;p&gt;闭包声明符(&lt;strong&gt;^&lt;/strong&gt;)，声明符是随便发明的名字，也是一种标识符&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return-type (^ blockName) (parameter type);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;不带参数-不带返回值:c48de781c7df3f22ef708366af0071e1&#34;&gt;不带参数，不带返回值&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;void (^ blockName) (void);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;多参数:c48de781c7df3f22ef708366af0071e1&#34;&gt;多参数&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;return-type (^ blockName) (parameter-type1, parameter-type2, ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;block定义:c48de781c7df3f22ef708366af0071e1&#34;&gt;block定义&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;^&lt;/strong&gt;表示闭包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blockName = ^(parameter-type parameter) {
    ...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后有个分号，当然一条完整的语句是需要分号的。&lt;/p&gt;

&lt;h4 id=&#34;不带参数-不带返回值-1:c48de781c7df3f22ef708366af0071e1&#34;&gt;不带参数，不带返回值&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;^{
   ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上也可以赋值，之后的调用形式:
    blockName()&lt;/p&gt;

&lt;h4 id=&#34;多参数-1:c48de781c7df3f22ef708366af0071e1&#34;&gt;多参数&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;^ return-type (type1 firstValue, type2 secondValue) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;闭包捕获变量:c48de781c7df3f22ef708366af0071e1&#34;&gt;闭包捕获变量&lt;/h3&gt;

&lt;p&gt;block能捕获一个代码块内的变量，以&lt;strong&gt;值传递&lt;/strong&gt;的方式传递，也就是说闭包内改变捕获的变量的值，在外部是不可见的。并且在闭包定义后改变这个变量的值，在闭包中仍然是改变前的值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
};

anInteger = 84;

testBlock();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果是:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Integer is: 42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到在闭包内，捕获的变量没有随着后面的赋值儿发生改变，也就是值传递的方式传递捕获变量。&lt;/p&gt;

&lt;h4 id=&#34;共享的方式捕获变量:c48de781c7df3f22ef708366af0071e1&#34;&gt;共享的方式捕获变量&lt;/h4&gt;

&lt;p&gt;以__block方式声明的变量，以&lt;strong&gt;引用&lt;/strong&gt;的方式传递&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__block int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
};

anInteger = 84;

testBlock();   // 输出: Integer is: 84
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再看一下闭包改变original变量的值的例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__block int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
    anInteger = 100;
};

testBlock();
NSLog(@&amp;quot;Value of original variable is now: %i&amp;quot;, anInteger);    // 输出: Value of original variable is now: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，变量的值改变了&lt;/p&gt;

&lt;h3 id=&#34;以参数的形式传递闭包:c48de781c7df3f22ef708366af0071e1&#34;&gt;以参数的形式传递闭包&lt;/h3&gt;

&lt;p&gt;闭包可以被当作参数来进行传递，如果是在类的成员函数中定义的，可以捕获self，此时要当心&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW16&#34;&gt;Avoid Strong Reference Cycles when Capturing self&lt;/a&gt;
问题。&lt;/p&gt;

&lt;h3 id=&#34;typedef命名闭包:c48de781c7df3f22ef708366af0071e1&#34;&gt;typedef命名闭包&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;typedef return-type (^blockName)(parameter-type1, parameter-type2, ...);&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考:c48de781c7df3f22ef708366af0071e1&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW2&#34;&gt;Programming with Objective-C&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Foundation学习笔记</title>
            <link>http://chenhuaying.github.io/post/2016/2016-01-04-Foundation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Mon, 04 Jan 2016 12:40:49 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2016/2016-01-04-Foundation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <description>

&lt;h2 id=&#34;foundation:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;Foundation&lt;/h2&gt;

&lt;p&gt;Foundation为objective-c提供了数字、字符串、数组，字典等数据结构，能像其它高级语言Python/PHP/Go那样操作字符串、数组、字典与集合等。如果不知道怎么写，可以先想想python怎么做的，然后再看看Foundation对应的API。&lt;/p&gt;

&lt;h3 id=&#34;数字:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;数字&lt;/h3&gt;

&lt;p&gt;NSNumber，需要&lt;code&gt;#import &amp;lt;Foundation/NSValue.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;封装了对数字的操作，包括整数，浮点数&lt;/p&gt;

&lt;h3 id=&#34;字符串:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;字符串&lt;/h3&gt;

&lt;p&gt;NSString，需要&lt;code&gt;#import &amp;lt;Foundation/NSString.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;封装字符串操作，有很多类似Python等高级语言里的操作都有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不可变字符串，@&amp;ldquo;string&amp;rdquo;生成的是不可变字符串NSConstantString&lt;/li&gt;
&lt;li&gt;可变字符串，NSMutableString&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NSMutableString与NSConstantString都是NSString类的子类&lt;/p&gt;

&lt;h3 id=&#34;数组:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;数组&lt;/h3&gt;

&lt;p&gt;NSArray，需要&lt;code&gt;#import &amp;lt;Foundation/NSArray.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NSArray是不可变数组&lt;/li&gt;
&lt;li&gt;NSMutableArray是可变数组，是NSArray的子类&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数组基本操作&lt;/p&gt;

&lt;h4 id=&#34;1-初始化不可变数组:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;1. 初始化不可变数组&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSArray *monthName = [NSArray arrayWithObjects:
  @&amp;quot;January&amp;quot;, @&amp;quot;February&amp;quot;, @&amp;quot;March&amp;quot;, @&amp;quot;April&amp;quot;,
	@&amp;quot;May&amp;quot;, @&amp;quot;June&amp;quot;, @&amp;quot;July&amp;quot;, @&amp;quot;August&amp;quot;, @&amp;quot;September&amp;quot;,
	@&amp;quot;October&amp;quot;, @&amp;quot;November&amp;quot;, @&amp;quot;December&amp;quot;, nil];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一个必须指定为nil，但它不会存储在数组中&lt;/p&gt;

&lt;h4 id=&#34;2-可变数组初始化:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;2. 可变数组初始化&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSMutableArray *myMutableArray = [[NSMutableArray alloc] init]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过alloc来分配数组可以获得数组的所有权，如果用array方法分配数组，只有它的使用权，它的所有权属于NSMutableArray&lt;strong&gt;有待于测试它的真实含义&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-枚举:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;3. 枚举&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;for ( T *v in myArray ) {
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字典:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;字典&lt;/h3&gt;

&lt;p&gt;NSDictionary，需要&lt;code&gt;#import &amp;lt;Foundation/NSDictionary.h&amp;gt;&lt;/code&gt;，字典的Key可以是任何对象，但必须是单值，Value可以是任何对象，不能是nil&lt;/p&gt;

&lt;p&gt;NSMutableDictionary是NSDictionary的子类&lt;/p&gt;

&lt;p&gt;枚举&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (T *key in myDict) {
  [myDict objectForKey: key]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;集合:fca372f4ca3c17598ccaeb904e5eb656&#34;&gt;集合&lt;/h3&gt;

&lt;p&gt;NSSet, 需要&lt;code&gt;#import &amp;lt;Foundation/NSSet.h&amp;gt;&lt;/code&gt;，支持交集与并集的操作&lt;/p&gt;

&lt;p&gt;NSMutableSet是NSSet的子类&lt;/p&gt;

&lt;p&gt;枚举&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (T *e in mySet) {
  [e method]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有一种NScountedSet，支持一个集合中有多个值，增加一个count+1，删除一个count-1，如果count为零则删除对象&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>objective-c学习笔记</title>
            <link>http://chenhuaying.github.io/post/2015/2015-12-29-objective-c%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Tue, 29 Dec 2015 14:48:53 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2015/2015-12-29-objective-c%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <description>

&lt;h2 id=&#34;类的定义中的继承与多态:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;类的定义中的继承与多态&lt;/h2&gt;

&lt;p&gt;与C++相似，支持继承、重载&lt;/p&gt;

&lt;h3 id=&#34;多态:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;多态&lt;/h3&gt;

&lt;p&gt;使用&lt;strong&gt;abstruct&lt;/strong&gt; superclass&lt;/p&gt;

&lt;h2 id=&#34;成员变量:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;成员变量&lt;/h2&gt;

&lt;p&gt;下文中&lt;strong&gt;instance&lt;/strong&gt;表示某个类的实例，&lt;strong&gt;property&lt;/strong&gt;表示类的某个成员变量，setProperty表示该成员变量的setter&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取&lt;code&gt;[instance property]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;赋值&lt;code&gt;[instance setProperty: value]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;成员函数调用:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;成员函数调用&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;类方法或成员函数调用

&lt;ul&gt;
&lt;li&gt;objc: &lt;code&gt;[className/instance method: parameters]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++: &lt;code&gt;className::static method&lt;/code&gt;，或者是&lt;code&gt;object.method&lt;/code&gt;与&lt;code&gt;pointer-&amp;gt;method&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;new实例化对象

&lt;ul&gt;
&lt;li&gt;objc: &lt;code&gt;[class new]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;c++:  &lt;code&gt;new class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;objective-c中对函数的调用很一致，c++中实例化与函数调用的形式是不一样的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;内存分配
&lt;code&gt;[ClassName alloc]/[ClassName allocate]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化
&lt;code&gt;[ClassName init]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内存释放
&lt;code&gt;[instance release]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;alloc, init, release&lt;/strong&gt; 从&lt;strong&gt;NSObject&lt;/strong&gt;继承而来&lt;/p&gt;

&lt;h2 id=&#34;类定义:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;类定义&lt;/h2&gt;

&lt;p&gt;类的定义与分为声明和定义两部分&lt;/p&gt;

&lt;h3 id=&#34;声明-interface:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;声明: @interface&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; 成员函数，&lt;strong&gt;+&lt;/strong&gt; 类方法&lt;/li&gt;
&lt;li&gt;函数返回值

&lt;ul&gt;
&lt;li&gt;返回值：放在负号后面的括号中&lt;strong&gt;-(int), -(double)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;无返回值：&lt;strong&gt;-(void)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方法声明：
&lt;code&gt;-(return type) functionName: (parameter type) parameter;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;声明格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface NewClass : fatherClass
{
   memberDeclarations;  // 成员变量声明
}
methodDeclarations;      // 成员函数声明
@end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;属性
@property
自动生成setter/getter的声明，定义的需要在定义部分使用@synthesize&lt;br /&gt;
&lt;code&gt;@property int x&lt;/code&gt; 自动生成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(void) setX: (int) a;
-(int) X();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多参数方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;冒号(&lt;strong&gt;:&lt;/strong&gt;)连接参数&lt;/li&gt;
&lt;li&gt;冒号连接的参数名，是函数签名的一部分，如下面的&lt;strong&gt;over&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;-(void) setTo: (int) n over: (int) d&lt;/code&gt;&lt;br /&gt;
调用时采用如下形式:&lt;br /&gt;
        &lt;code&gt;[instance setTo: 1 over: 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不带参数名的方法&lt;br /&gt;
  &lt;code&gt;-(void) set: (int) n : (int) d&lt;/code&gt;&lt;br /&gt;
  调用形式:&lt;br /&gt;
        &lt;code&gt;[instance set: 1 : 3]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;@class声明一个类型，在接下来的作用域中就可以直接使用@class声明过的类:
  &lt;code&gt;@class ClassName&lt;/code&gt;&lt;br /&gt;
  可以用&lt;code&gt;#import &amp;lt;class-interface.h&amp;gt;&lt;/code&gt;来代替，但用@class效率更高&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要使用class中的方法，还是得用&lt;strong&gt;import&lt;/strong&gt;方式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;定义-implement:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;定义: @implement&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义格式:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation NewClass
   methodDefinitions;  // 成员函数定义
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@implementation NewClass: NSObject实现的父类是可选的，通常不用显示的写出，声明必须要有&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;属性@synthesize&lt;br /&gt;
&lt;code&gt;@synthesize x&lt;/code&gt;自动生成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(void) setX: (int) a
{
    x = a;
}


-(int) X:
{
   return x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一行可以定义多个，之间用逗号分隔&lt;code&gt;@synthesize x, y&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;self关键字:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;self关键字&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[self method]&lt;/code&gt;self表示方法的接收者是对象自身
在类的定义中访问成员变量不需要用self&lt;/p&gt;

&lt;h3 id=&#34;点运算符:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;点运算符&lt;/h3&gt;

&lt;p&gt;objective-c 2.0开始可以使用&lt;strong&gt;.&lt;/strong&gt;运算符&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取成员变量值: &lt;strong&gt;instance.property&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;设置成员变量值: &lt;strong&gt;instance.property = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;初始化:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;初始化&lt;/h3&gt;

&lt;p&gt;分配内配后通常要调用初始化方法，一定要正确的初始化&lt;strong&gt;继承&lt;/strong&gt;而来的成员变量，首先调用父类的初始化方法，再初始化自己的成员变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(MyClass *) initWith: (int) a : (int) b
{
	self = [super init];
	if (self)
	  [self setA: a withB: b];
	return self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基本数据类型:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;基本数据类型&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;内置数据类型

&lt;ul&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;字符串

&lt;ul&gt;
&lt;li&gt;普通字符串: &amp;ldquo;string&amp;rdquo;&lt;/li&gt;
&lt;li&gt;NSString: @&amp;ldquo;string&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;限定

&lt;ul&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;li&gt;long long&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;unsigned&lt;/li&gt;
&lt;li&gt;signed&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;id类型

&lt;ul&gt;
&lt;li&gt;id类型可以存储任意类型的值，有点&lt;/li&gt;
&lt;li&gt;id类型是&lt;strong&gt;返回值&lt;/strong&gt;、&lt;strong&gt;参数&lt;/strong&gt;的默认类型&lt;/li&gt;
&lt;li&gt;多态、动态绑定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;格式化输出:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;格式化输出&lt;/h3&gt;

&lt;p&gt;NSLog格式化字符&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;整数: %i %o %#o %x %#x %X %#X&lt;/li&gt;
&lt;li&gt;浮点数: %f %e %g&lt;/li&gt;
&lt;li&gt;字符: %c&lt;/li&gt;
&lt;li&gt;字符串: %@&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;表达式:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;表达式&lt;/h2&gt;

&lt;h3 id=&#34;运算符:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;运算符&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;算术运算&lt;/li&gt;
&lt;li&gt;- * / %&lt;/li&gt;
&lt;li&gt;赋值运算
＝ += -= &amp;amp;= |=&lt;/li&gt;
&lt;li&gt;位运算
&amp;amp; | ^ ~ &amp;gt;&amp;gt; &amp;lt;&amp;lt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;循环:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;循环&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;for: 与C++相同，支持在语句中声明变量&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;do&lt;/li&gt;
&lt;li&gt;break continue&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;条件语句:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;条件语句&lt;/h3&gt;

&lt;p&gt;Boolean: TRUE/FALSE YES/NO&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;li&gt;switch&lt;/li&gt;
&lt;li&gt;? :&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;内存管理:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;内存管理&lt;/h2&gt;

&lt;h3 id=&#34;重载dealloc:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;重载dealloc&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;dealloc函数从NSObject继承而来&lt;/li&gt;
&lt;li&gt;释放继承的父类的内存&lt;code&gt;[super release]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-(void) dealloc
{
  [x release];
  [super dealloc];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;x可以为nil&lt;strong&gt;对象&lt;/strong&gt;，这点与C++不同，C++中不能释放null指针所指向的内存地址，也不能用NULL指针调用方法，获取属性等操作，而在objective-c中是&lt;strong&gt;允许&lt;/strong&gt;的。&lt;/p&gt;

&lt;p&gt;注意: &lt;a href=&#34;https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&#34;&gt;ARC&lt;/a&gt;不需要调用&lt;code&gt;[super dealloc]&lt;/code&gt;(通常会产生编译错误)。&lt;/p&gt;

&lt;h2 id=&#34;多态-动态绑定:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;多态，动态绑定&lt;/h2&gt;

&lt;h3 id=&#34;id类型:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;id类型&lt;/h3&gt;

&lt;p&gt;id类型可以指向存储任何类型的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id f;
Duck *d = [[Duck alloc] init];
Cat *c = [[Cat alloc] init];

f = d
[f say];

f = c
[f say];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个地方有动态语言的特点，不同于C++&lt;/p&gt;

&lt;h3 id=&#34;类对象class-object:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;类对象class-object&lt;/h3&gt;

&lt;p&gt;类对象通常是由class方法产生的对象，如：&lt;br /&gt;
&lt;code&gt;[ClassName/(an instance of ClassName) class]&lt;/code&gt;&lt;br /&gt;
都将得到一个ClassName类对象&lt;/p&gt;

&lt;p&gt;有如下操作:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;判断两个对象是否是相同的类&lt;br /&gt;
&lt;code&gt;if ([obj class] == [obj2 class])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;某个变量是否是是否是属于一个类，即是否是这个类的成员&lt;br /&gt;
&lt;code&gt;[aValue isMemberof: [ClassName class]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个变量是否是一个类的实例&lt;br /&gt;
&lt;code&gt;[aInstance isKindOf: [ClassName class]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个类是否是另一个类的子类&lt;br /&gt;
&lt;code&gt;[ClassName isSubclassOfClass: [BassClassName class]]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;sel对象:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;SEL对象&lt;/h3&gt;

&lt;p&gt;通常由@selector指令产生，如：&lt;code&gt;@selector methodName&lt;/code&gt;，将得到一个SEL对象&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一个类是否有某一个操作&lt;br /&gt;
&lt;code&gt;anObject respondsToSelector: @selector methodName&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;异常处理:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;异常处理&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;try-catch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@try {
   statement;
   statement;
   ...;
}
@catch (NSException *exception) {
   statement;
   statement;
   ...;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;@throw抛出异常&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;作用域:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;作用域&lt;/h2&gt;

&lt;h3 id=&#34;作用域限定指令:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;作用域限定指令&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;@private，只能在该类的方法中使用，其子类也不能使用&lt;/li&gt;
&lt;li&gt;@protected，能在该类及其子类中使用，&lt;strong&gt;默认情况&lt;/strong&gt;；C++类的默认情况则是private&lt;/li&gt;
&lt;li&gt;@public，能在声明后的任意位置访问&lt;/li&gt;
&lt;li&gt;@package，包内访问&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;c类语言作用域:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;C类语言作用域&lt;/h3&gt;

&lt;p&gt;与C类语言相似的作用域，意义也相同
1. 外部变量，extern
2. 静态变量，static&lt;/p&gt;

&lt;h2 id=&#34;存储类说明符:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;存储类说明符&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;auto，与C++11的auto不同，这里表示的是自动变量，通常指的是局部变量，在一个函数或一个代码块中的变量，可以省略&lt;/li&gt;
&lt;li&gt;const，常量&lt;/li&gt;
&lt;li&gt;volatile，防止编译器优化&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;数据类型:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;数据类型&lt;/h2&gt;

&lt;h3 id=&#34;枚举类型:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;枚举类型&lt;/h3&gt;

&lt;p&gt;与C语言类似的语法，第一个赋值为0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum flag {
	on,
	off
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以给他们赋值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum weekDay {
	monday = 1,
	tuesday, wednesday, thursday, friday, saturday, sunday
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;别名:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;别名&lt;/h3&gt;

&lt;p&gt;typedef，相当于给一个类型取了个别名&lt;br /&gt;
&lt;code&gt;typedef typeName newName&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;分类与协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;分类与协议&lt;/h2&gt;

&lt;h3 id=&#34;分类:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;分类&lt;/h3&gt;

&lt;p&gt;用于扩展已有的类型，而无需访问该类的源代码，也就是说可以扩展以二进制形式发布的库！就算是可以访问源代码的类，通过这种方式扩展更安全。&lt;/p&gt;

&lt;p&gt;其声明和定义的语法与类的定义非常相似，圆括号中的是分类名。&lt;/p&gt;

&lt;p&gt;声明的格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassName (categoryName)
-(return type) method: (parameter type) parameter;
...
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;声明中不能指定类的父类，否则编译器会报错&lt;/p&gt;

&lt;p&gt;定义的格式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation ClassName (categoryName)
    // code for category  method implementation
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分类中可以重载类中的方法，会影响到该类及其子类，通过&lt;strong&gt;分类&lt;/strong&gt;重载类方法要&lt;strong&gt;谨慎&lt;/strong&gt;使用;&lt;/p&gt;

&lt;p&gt;不必实现分类中的所有方法，可以先定义所有方法，以后再慢慢实现。&lt;/p&gt;

&lt;h3 id=&#34;协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;协议&lt;/h3&gt;

&lt;p&gt;协议定义一组方法，遵循该协议的类需要实现这个协议中的&lt;strong&gt;所有&lt;/strong&gt;方法，&lt;strong&gt;@optional&lt;/strong&gt;指令下的方法&lt;strong&gt;除外&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-声明:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;1. 声明&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@protocol ProtocolName
// methods declare
@optional
// optional methods declare
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@optional表示可选协议，遵循该协议的类不是必须实现可选方法；与之对应的是&lt;strong&gt;@required&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-采用协议-遵循协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;2. 采用协议/遵循协议&lt;/h4&gt;

&lt;p&gt;要让某个类遵循一个协议，在@interface声明时，用&amp;lt;&amp;hellip;&amp;gt;列出协议的名称，多个协议用&lt;strong&gt;,&lt;/strong&gt;分隔&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassName: BaseClass &amp;lt;ProtocaoName, ProtocolName2, ...&amp;gt;
{
    // members declare
}
// methods declare
@end 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-分类采用协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;3. 分类采用协议&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassName (categoryName) &amp;lt;ProtocolName1, ProtocolName2, ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-协议扩展:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;4. 协议扩展&lt;/h4&gt;

&lt;p&gt;协议采用或遵循协议&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@protocol ExtendProtocol &amp;lt;ProtocolName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-非正式协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;5. 非正式协议&lt;/h4&gt;

&lt;p&gt;非正式协议或者叫&lt;strong&gt;抽象协议&lt;/strong&gt;，其实是一个分类，列出一组方法。如果一个类采用正式协议，必须实现协议下的所有方法。如果采用的是非正式协议这不用实现协议下的所有方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassName (categoryName)
// methods declare
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;6-通知编译器做类型检查:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;6. 通知编译器做类型检查&lt;/h4&gt;

&lt;p&gt;在类名称之后的尖括号中添加协议名称，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;id &amp;lt;ProtocolName1, ProtocolName2, ...&amp;gt; myObject;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在给myObject赋值时，会进行类型检查，如果该值不遵循指定的协议，编译器会报警&lt;/p&gt;

&lt;h4 id=&#34;7-检查对象是否遵循协议:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;7. 检查对象是否遵循协议&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;id myObject;
...
if ([myObject conformsToProtocol: @protocol (ProtocolName)]) {
    // do operation
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;8-聚合或者组合:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;8. 聚合或者组合&lt;/h4&gt;

&lt;p&gt;objective-c支持组合的方式扩展，&lt;strong&gt;不支持&lt;/strong&gt;嵌入扩展&lt;/p&gt;

&lt;h2 id=&#34;c语言特性:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;C语言特性&lt;/h2&gt;

&lt;p&gt;C语言特性要用C的方式来操作，不要用objective-c的方式操作&lt;/p&gt;

&lt;h3 id=&#34;宏扩展:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;宏扩展&lt;/h3&gt;

&lt;p&gt;与C的宏相同，支持条件编译，定义宏名等，按照C语言的方式理解即可&lt;/p&gt;

&lt;h3 id=&#34;数组:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;数组&lt;/h3&gt;

&lt;h3 id=&#34;结构体:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;结构体&lt;/h3&gt;

&lt;h3 id=&#34;联合:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;联合&lt;/h3&gt;

&lt;h3 id=&#34;函数:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;函数&lt;/h3&gt;

&lt;h3 id=&#34;其它语言特性:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;其它语言特性&lt;/h3&gt;

&lt;h2 id=&#34;总结:fdd26320f49682be3509ea9d4a92ee2f&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;objective-c是在C语言的基础上的改进，它们之间有联系，又有区别。objective-c增加了对面向对象编程技术的支持，面向对象部分与C++有些概念相似，但比C++简洁。语言级别的学习先到此告一段落，接下来是Foundation框架的学习，iOS编程的基础。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Go Interface助记</title>
            <link>http://chenhuaying.github.io/post/2015/2015-12-09-Go%20Interface%E5%8A%A9%E8%AE%B0/</link>
            <pubDate>Wed, 09 Dec 2015 12:57:11 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2015/2015-12-09-Go%20Interface%E5%8A%A9%E8%AE%B0/</guid>
            <description>&lt;p&gt;Go语言的interface(接口)灵活性很大，也就是Go语言发明者说的Duck类型，理论上简单直白，但是对于我这个半路学习编程的人来说还是犯了一个错误，而且还是多次，这引起了我的重视，决定记录下来。虽然这显得很Low，但没办法，实事求是比较重要。&lt;/p&gt;

&lt;p&gt;先前，理解interface是把它当作一个指针，初始化为nil。按照C语言的写法，将一个NULL赋值给一个指针，该指针也是NULL，先看看C语言的代码片段:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct yellowDuck_s {
  char name[32];
  } yellowDuck;
}

int main(int argc, char *argv[])
{
  void *duck = NULL;

  if (duck == NULL) {
    printf(&amp;quot;%s\n&amp;quot;, &amp;quot;no duck&amp;quot;);  // 输出为no duck
  }

  yellowDuck *yd = NULL;
  
  duck = yd;
  if (duck == NULL) {
    printf(&amp;quot;%s\n&amp;quot;, &amp;quot;no duck&amp;quot;);  // 输出为no duck
  }
  return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指针指向的地址为NULL，&lt;code&gt;ptr == NULL&lt;/code&gt; 这样的判断结果都为true。&lt;/p&gt;

&lt;p&gt;Go语言这么做会出现问题，&lt;code&gt;interface == nil&lt;/code&gt;的结果为false，在此处犯了几次错误，引起了一些bug，做了些测试仍然绕不过这个弯，没有理论背景，不知道如何理解。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type duck interface {
  Say()
}

type yellowDuck struct {
  name string
}

type duckHose struct {
  d duck
}

func (d *yellowDuck) Say() {
  fmt.Println(d.name, &amp;quot;GaGa......&amp;quot;)
}

func main() {
  var d duck
  
  fmt.Printf(&amp;quot;%T\n&amp;quot;, d)          // 输出为&amp;lt;nil&amp;gt;
  if d == nil {
    fmt.Println(&amp;quot;no duck&amp;quot;)       // 输出为: no duck
  }
  
  var d1 *yellowDuck
  var d2 duck
  d2 = d1
  fmt.Printf(&amp;quot;%T %T\n&amp;quot;, d2, d1)  // 输出为*main.yellowDuck *main.yellowDuck
  if d2 == nil {
    fmt.Println(&amp;quot;no duck here&amp;quot;)  // 此处不输出，因为d2 == nil条件判断为false
  }
  
  d = &amp;amp;yellowDuck{name: &amp;quot;xiaohuangya&amp;quot;}
  d.Say()
  
  h := &amp;amp;duckHose{d: d1}
  if h.d == nil {
    fmt.Println(&amp;quot;empty&amp;quot;)         // 此处不输出，同样h.d == nil的结果为false
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在intereface判断是否为nil的情况下，出了几次错误，将d1赋值给d2时&lt;code&gt;d2 = d1&lt;/code&gt;，&lt;code&gt;d2 == nil&lt;/code&gt;的结果&lt;strong&gt;false&lt;/strong&gt;，但&lt;code&gt;d1 == nil&lt;/code&gt;的结果为&lt;strong&gt;true&lt;/strong&gt;，所以不能拿C语言的指针来看待interface，虽然行为上两者很相似，但两者之间处理的差别很大，在赋值时&lt;code&gt;d2 = d1&lt;/code&gt;，d2中保存的应该是d1的指针或者引用。所以d2不为nil。&lt;/p&gt;

&lt;p&gt;但是，有需要判断&lt;strong&gt;d2&lt;/strong&gt;或者&lt;strong&gt;h.d&lt;/strong&gt;所指向的值是否为nil，此时需要加&lt;strong&gt;类型断言&lt;/strong&gt;才能得到正确的结果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...

if d2.(*yellowDuck) == nil {
  fmt.Println(&amp;quot;no duck here&amp;quot;)    // 输出为: no duck here
}

...

if h.d.(*yellowDuck) == nil {
  fmt.Println(&amp;quot;empty&amp;quot;)           // 输出为: empty
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;助记:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;interface初始化为nil&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;赋值时，interface中保存的是右值的地址&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;要判断Interface所指向的值是否为nil，要加类型断言&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注: 助记是没有办法的办法，先这么理解。仍然是C语言的思维，肯定有误差，以后理论基础丰富了再来纠错。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Hello world</title>
            <link>http://chenhuaying.github.io/post/2015/2015-11-28-Helloworld/</link>
            <pubDate>Sat, 28 Nov 2015 10:49:12 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2015/2015-11-28-Helloworld/</guid>
            <description>

&lt;p&gt;作为程序员经典的开篇Hello World，本篇也遵循行业一致规则以Hello World开头。虽然有牵强附会之感，但也希望有一个好的缘起，像学习编程一样能坚持走下来。&lt;/p&gt;

&lt;p&gt;之前用过jekyll，但没坚持下来，可能是他由Ruby开发的原因，对Ruby实在是太陌生。无意中在网上看到&lt;a href=&#34;http://blog.coderzh.com/&#34;&gt;coderzh&lt;/a&gt;的文章&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;《使用hugo搭建个人博客站点》&lt;/a&gt;，发现&lt;a href=&#34;http://gohugo.io&#34;&gt;hugo&lt;/a&gt;居然还是Go开发的，而且还支持在push到github上，正好最近在用Go语言开发项目，索性也学着搭建一个个人博客。使用的主题和风格与&lt;a href=&#34;http://blog.coderzh.com/&#34;&gt;coderzh&lt;/a&gt;的博客都很相像，颜色和样式稍微做了修改，虽然改动很小，但是花了很多时间。从github上clone代码各种查找比较，chrome浏览器中查看元素属性，一顿折腾，总算是改过来了，在此向开源社区致敬，没有你们真实搞不定啊。隔行如隔山，毕竟做后端开发的，前端知识了解得太少了，可见动手总算时困难的。&lt;/p&gt;

&lt;p&gt;先做好一个样板，以后慢慢修改，从&lt;a href=&#34;http://blog.coderzh.com/&#34;&gt;coderzh&lt;/a&gt;那儿拿来不少东西，连分类都很像，没办法，经典总是要学习的嘛，非常感谢。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;打算增加一个随时记录分类，记录一些很短的没有经过整理的短篇，然后合并删除。以后这个分类可能会删掉，主要是前期要养成记录总结的习惯。&lt;/li&gt;
&lt;li&gt;随笔感想中主要记录对编程的总结，虽然菜鸟一枚，但总结总结也是一个提高。&lt;/li&gt;
&lt;li&gt;技术文章中主要是&lt;strong&gt;错误处理&lt;/strong&gt;，&lt;strong&gt;编程实践&lt;/strong&gt;，&lt;strong&gt;代码分析&lt;/strong&gt;等，为什么要加一个错误处理呢，一是为了避免下次再犯类似的错误，二是给其他人一个借鉴，IT领域很多错误都有相似性，说不定就有人从某一篇中获得帮助。3年前写过一篇关于solr的文章&lt;a href=&#34;http://jack-boy.iteye.com/blog/1499746&#34;&gt;solr ＋ Tomcat安装&lt;/a&gt;，虽然很简单，但是还是有人从中获得帮助。&lt;/li&gt;
&lt;li&gt;读书笔记当然就是对平时读到的好书的总结，方方面面的都有，&lt;strong&gt;学习方法&lt;/strong&gt;，&lt;strong&gt;编程技术&lt;/strong&gt;等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;开篇勉励:9e86fe6f33568492b3631feff9a94551&#34;&gt;开篇勉励&lt;/h3&gt;

&lt;p&gt;万事开头难，但坚持更加不易，多读，多思，多写。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>about</title>
            <link>http://chenhuaying.github.io/about/</link>
            <pubDate>Wed, 25 Nov 2015 13:35:17 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/about/</guid>
            <description>

&lt;h2 id=&#34;about-me:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;About Me&lt;/h2&gt;

&lt;p&gt;一个不喜欢写博客的人，开始学习总结并整理成文。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Something With Golang</title>
            <link>http://chenhuaying.github.io/post/2015/2015-10-21-something-with-golang/</link>
            <pubDate>Wed, 21 Oct 2015 17:11:27 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2015/2015-10-21-something-with-golang/</guid>
            <description>

&lt;h3 id=&#34;glog:0ba069f7990e94ac53e229e899745a36&#34;&gt;glog&lt;/h3&gt;

&lt;p&gt;修改过的&lt;a href=&#34;http://github.com/chenhuaying/glog&#34;&gt;glog&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;vmodule-选项:0ba069f7990e94ac53e229e899745a36&#34;&gt;vmodule 选项&lt;/h4&gt;

&lt;h3 id=&#34;数组vs切片:0ba069f7990e94ac53e229e899745a36&#34;&gt;数组vs切片&lt;/h3&gt;

&lt;p&gt;数组与切片不是一个类型，在以切片为参数的函数时，需要将数组转换为切片, 方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;array := [...]int{1, 2, 3}
func testFunc(a []int) {
  // do something
}

testFunc(array[:])
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>Golang Struct Reset</title>
            <link>http://chenhuaying.github.io/post/2015/2015-09-24-golang-struct-reset/</link>
            <pubDate>Thu, 24 Sep 2015 12:20:03 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2015/2015-09-24-golang-struct-reset/</guid>
            <description>&lt;p&gt;直接零赋值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type mystrut struct {
	name string
	data interface{}
}

ins := &amp;amp;mystruct{
	name: &amp;quot;Golang newbie&amp;quot;
	data: &amp;quot;string data&amp;quot;
}

ins = &amp;amp;mystruct{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者用反射(&lt;strong&gt;reflect&lt;/strong&gt;)清零&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func clear(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果传入的参数不是指针会直接pannic&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Simple WebRTC</title>
            <link>http://chenhuaying.github.io/post/2015/2015-09-09-simple-webrtc/</link>
            <pubDate>Wed, 09 Sep 2015 17:10:18 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2015/2015-09-09-simple-webrtc/</guid>
            <description>

&lt;h3 id=&#34;step1:45182077ebf5fde33b240d908544e8a6&#34;&gt;Step1&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;html-&amp;gt;body中添加&lt;code&gt;&amp;lt;video /&amp;gt;&lt;/code&gt;，在JS中用&lt;code&gt;document.querySelector(&amp;quot;video&amp;quot;);&lt;/code&gt;可以获取到该标签&lt;/li&gt;
&lt;li&gt;JS中添加如下代码既可以操作视频流&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var constrains = {video:  {mandatory: {
      maxWidth: 640,
      maxHeight: 360 
}}};

function successCallback(localMediaStream) {
    window.stream = localMediaStream;
    var video = document.querySelector(&amp;quot;video&amp;quot;);
    video.src = window.URL.createObjectURL(localMediaStream);
    video.play();
}

function errorCallback(error) {
    console.log(&amp;quot;navigator.getUserMedia error: &amp;quot;, error);
}

getUserMedia(constrains, successCallback, errorCallback);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;window.stream = localMediaStream;&lt;/code&gt; 将stream导出到&lt;strong&gt;window&lt;/strong&gt;中，可以省略&lt;/p&gt;

&lt;p&gt;这一步只是设置本地视频的基本步骤，显示如何使用本地摄像头，还不牵涉到端对端的交互。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>JS Object Life</title>
            <link>http://chenhuaying.github.io/post/2015/2015-09-08-js-object-life/</link>
            <pubDate>Tue, 08 Sep 2015 18:30:12 CST</pubDate>
            <author>Cyrill at Schumacher dot fm</author>
            <guid>http://chenhuaying.github.io/post/2015/2015-09-08-js-object-life/</guid>
            <description>

&lt;h3 id=&#34;prototype:3b581fb81ec92a6bced8ae098d7b829b&#34;&gt;Prototype&lt;/h3&gt;

&lt;p&gt;JavaScript是基于原型的面向对象语言，基本上每个Object（对象）都有一个Prototype（原型），在JS中原型也是一种对象，对象中各个属性的都是来源于它，在对象中引用一个属性时，会向上递归的查找原型。
Object.prototype是大多数对象的原型&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object.create(prototype)&lt;/code&gt;以一个原型为基础来创建一个对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.getPrototypeOf(object)&lt;/code&gt;获取对象的原型&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function RTextCell(text) {
  TextCell.call(this, text);
}
RTextCell.prototype = Object.create(TextCell.prototype);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;构造函数通常以大写字母开头。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面是继承机制的一个实例，RTextCell的构造函数调用其父对象TextCell中的构造函数，这样就继承了TextCell的所有属性。&lt;/p&gt;

&lt;p&gt;RTextCell的prototype继承TextCelll的prototype，从RTextCell产生的实例就会可以调用TextCell原型中包含的属性。&lt;/p&gt;

&lt;p&gt;无原型的构造函数&lt;code&gt;Object.create(prototype)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;interface:3b581fb81ec92a6bced8ae098d7b829b&#34;&gt;Interface&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Object.defineProperty(TextCell.prototype, &amp;quot;heightProp&amp;quot;, {
    get: function() { return this.text.length; },
    set: function(value) { this.text.length = value; }
  });
var cell = new TextCell(&amp;quot;no\nway&amp;quot;);
console.log(cell.heightProp);
// → 2
cell.heightProp = 100;
console.log(cell.heightProp);
// → 100, 如果没有set，此处输出为2，执行不会报错，简单的忽略该操作
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Object.defineProperty(Object.prototype, &amp;quot;hiddenNonsense&amp;quot;,
    {enumerable: false, value: &amp;quot;hi&amp;quot;});
for (var name in map)
  console.log(name);
// → pizza
// → touched tree
// 此处不会出现hiddenNonsense，设置enumerable属性为false
console.log(map.hiddenNonsense);
// → hi, hiddenNonsense可以访问，只是不再for/in loop中显示
console.log(&amp;quot;hiddenNonsense&amp;quot; in map)
// →true, 在in操作中仍然可见
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三个参数
Object.defineProperty(&lt;strong&gt;ObjectName&lt;/strong&gt;.prototype, &lt;strong&gt;property name&lt;/strong&gt;, &lt;strong&gt;options&lt;/strong&gt;)
options是一个字典型的参数，其选项有：
1. enumerable, 是否可以在 for/in loop中可见，但在&lt;strong&gt;in&lt;/strong&gt;操作中仍可见
2. value, 该property的值
3. setl/get, 读写属性的函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var pile = {
  elements: [&amp;quot;eggshell&amp;quot;, &amp;quot;orange peel&amp;quot;, &amp;quot;worm&amp;quot;],
  get height() {
    return this.elements.length;
  },
  set height(value) {
    console.log(&amp;quot;Ignoring attempt to set height to&amp;quot;, value);
  }
};

console.log(pile.height);
// → 3
pile.height = 100;
// → Ignoring attempt to set height to 100
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;set/get 在这里相当于是&lt;strong&gt;function&lt;/strong&gt;这样的标识符, 后面没有冒号，与*Object.defineProperty*中的有区别，后者是*map*中的一个属性，所以需要加&amp;rdquo;:&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
